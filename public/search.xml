<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ADB无线调试真机</title>
    <url>/blog/2021/06/27/ADB%E6%97%A0%E7%BA%BF%E8%B0%83%E8%AF%95%E7%9C%9F%E6%9C%BA/</url>
    <content><![CDATA[<h1 id="ADB-无线调试安卓真机"><a href="#ADB-无线调试安卓真机" class="headerlink" title="ADB 无线调试安卓真机"></a>ADB 无线调试安卓真机</h1><h3 id="准备条件"><a href="#准备条件" class="headerlink" title="准备条件"></a>准备条件</h3><ol>
<li>一部需要被调试的手机【<strong>小米max2 为例</strong>】【<strong>手机已经root</strong>】</li>
<li>下载终端模拟器APP <code>https://p0ny.lanzoui.com/iLcz7qpr7rc</code> </li>
</ol>
<h3 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h3><ol start="0">
<li><p>准备好 以上条件</p>
</li>
<li><p>打开 手机自带的 <code>手机管家</code> </p>
<p> <img src="https://gitee.com/coder_p0ny/md-nice-markdown_pic/raw/master/2021-6-26/1624703388149-image.png"></p>
</li>
</ol>
<ol start="2">
<li>点击 <code>应用管理</code> <img src="https://gitee.com/coder_p0ny/md-nice-markdown_pic/raw/master/2021-6-26/1624703432831-image.png"></li>
</ol>
<ol start="3">
<li>点击 <code>权限</code></li>
</ol>
<p><img src="https://gitee.com/coder_p0ny/md-nice-markdown_pic/raw/master/2021-6-26/1624703469380-image.png"></p>
<ol start="4">
<li>然后 给 <code>终端模拟器</code> 开启 Root权限<br> <img src="https://gitee.com/coder_p0ny/md-nice-markdown_pic/raw/master/2021-6-26/1624703501843-image.png"><br> 【如果 进去之后<strong>没有终端模拟器</strong>的条目，那么就先运行 终端模拟器app，然后输入命令 <code>su</code>回车，然后再返回 <code>root权限管理</code>，就会有终端模拟器这个条目了】</li>
</ol>
<ol start="5">
<li><p>然后运行 <code>终端模拟器APP</code></p>
</li>
<li><p>在终端 <strong>分别执行</strong> 以下命令：【一行 代表 一条命令】</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setprop service.adb.tcp.port 5555</span><br><span class="line">stop adbd</span><br><span class="line">start adbd</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后在终端执行 <code>ifconfig</code> 查看手机的IP</p>
</li>
</ol>
<p><img src="https://gitee.com/coder_p0ny/md-nice-markdown_pic/raw/master/2021-6-26/1624708629208-image.png"></p>
<ol start="8">
<li>在电脑 cmd 中执行命令 ADB远程 <code>adb connect 手机IP:5555</code></li>
</ol>
<p>   <img src="https://gitee.com/coder_p0ny/md-nice-markdown_pic/raw/master/2021-6-26/1624702318441-image.png"></p>
]]></content>
      <categories>
        <category>ADB 无线调试安卓真机</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 常用命令</title>
    <url>/blog/2021/06/08/Git%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h3 id="1、git常用命令"><a href="#1、git常用命令" class="headerlink" title="1、git常用命令"></a>1、git常用命令</h3><table>
<thead>
<tr>
<th>命令名称</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>git config –global user.name 用户名</td>
<td>设置用户签名</td>
</tr>
<tr>
<td>git config –global user.email 邮箱</td>
<td>设置用户签名</td>
</tr>
<tr>
<td>git init</td>
<td>初始化本地库</td>
</tr>
<tr>
<td>git status</td>
<td>查看本地库状态</td>
</tr>
<tr>
<td>git add 文件名</td>
<td>添加到暂存区</td>
</tr>
<tr>
<td>git reset HEAD</td>
<td>将 暂存区 里 所有文件 恢复到 工作区</td>
</tr>
<tr>
<td>git reset HEAD 1.txt</td>
<td>将 暂存区 里 指定文件 恢复到 工作区</td>
</tr>
<tr>
<td>git commit -m “日志信息” 文件名</td>
<td>提交到本地库</td>
</tr>
<tr>
<td>git reflog</td>
<td>查看历史记录</td>
</tr>
<tr>
<td>git reset –hard 版本号</td>
<td>版本穿梭</td>
</tr>
<tr>
<td>git remote add <strong>仓库别名</strong> <strong>仓库地址</strong></td>
<td>添加别名为 origin的远程仓库地址</td>
</tr>
<tr>
<td>git remote -v</td>
<td>查看添加的远程仓库地址</td>
</tr>
<tr>
<td>git push <strong>仓库别名</strong> master</td>
<td>push 到别名为 origin的远程仓库</td>
</tr>
</tbody></table>
<h3 id="1-1、配置-Git客户端"><a href="#1-1、配置-Git客户端" class="headerlink" title="1.1、配置 Git客户端"></a>1.1、配置 Git客户端</h3><p><code>git config --global user.name p0ny</code><br><code>git config --global user.email p0ny@88.com</code></p>
<p>为 Git客户端创建这么一个用户【以上的用户信息是虚拟的，只适用于本地的Git】</p>
<p><img src="https://gitee.com/coder_p0ny/md-nice-markdown_pic/raw/master/2021-5-24/1621832433778-image.png"></p>
<p>验证是否成功？：<br>在 <code>C:\Users\xxxx\</code> 下有这么一个 <code>.gitconfig</code> 文件，使用 记事本打开，可以看到如下内容</p>
<p><img src="https://gitee.com/coder_p0ny/md-nice-markdown_pic/raw/master/2021-5-24/1621832600633-image.png"></p>
<h3 id="1-2、初始化本地库"><a href="#1-2、初始化本地库" class="headerlink" title="1.2、初始化本地库"></a>1.2、初始化本地库</h3><p><img src="https://gitee.com/coder_p0ny/md-nice-markdown_pic/raw/master/2021-5-24/1621837286704-image.png"></p>
<p>在当前项目的根目录下右键 ，然后点击 <code>Git Bash Here</code></p>
<p>然后执行 <code>git init</code> 命令</p>
<p><img src="https://gitee.com/coder_p0ny/md-nice-markdown_pic/raw/master/2021-5-24/1621837380100-image.png"></p>
<p>可以看到，会在该目录下生成一个隐藏目录 <code>.git</code></p>
<p><img src="https://gitee.com/coder_p0ny/md-nice-markdown_pic/raw/master/2021-5-24/1621837421469-image.png"></p>
<h3 id="1-3、分支的操作"><a href="#1-3、分支的操作" class="headerlink" title="1.3、分支的操作"></a>1.3、分支的操作</h3><table>
<thead>
<tr>
<th>命令名称</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>git branch 分支名</td>
<td>创建分支</td>
</tr>
<tr>
<td>git branch</td>
<td>查看分支</td>
</tr>
<tr>
<td>git checkout 分支名</td>
<td>切换分支</td>
</tr>
<tr>
<td>git mergge 分支名</td>
<td>把指定的分支合并到当前分支上</td>
</tr>
</tbody></table>
<h3 id="1-4、分支合并操作"><a href="#1-4、分支合并操作" class="headerlink" title="1.4、分支合并操作"></a>1.4、分支合并操作</h3><ul>
<li>存在 master分支，然后创建一个分支的时候，该分支下自动存在 master分支下的所有文件。</li>
</ul>
<ol>
<li><p>正常合并</p>
<p>创建一个分支 <code>hot-fix</code> </p>
<p>创建分支成功后，执行命令 <code>git checkout hot-fix</code> </p>
<p>修改 <code>hot-fix</code> 下的文件内容，</p>
<p>然后执行命令 <code>git add 文件名</code> 添加到 暂存区</p>
<p>最后执行 <code>git commit -m &quot;自定义的日志信息&quot; 文件名</code> 提交到本地库中</p>
<p>将 <code>hot-fix</code> 分支合并到 <code>master</code> 分支，</p>
<p>切换至 <code>master</code> 分支</p>
<p>然后执行 <code>git merge hot-fix</code> 。</p>
<p>将 <code>hot-fix</code> 分支合并到当前分支【master】</p>
<p><strong>综上操作，只是创建一个分支，在该分支下读写文件内容，然后提交到本地库之后，切换至master分支，然后执行命令合并命令</strong><br><strong>针对于此，只是修改了 新分支下的文件内容</strong></p>
</li>
<li><p>合并冲突【依次修改并且提交相同的文件名】、</p>
<p>已有两个分支 <code>hot-fix</code> , <code>master</code> </p>
<p>依次在以上的分支修改相同的文件<code>hello.txt</code>并提交</p>
<p>然后切换至 <code>master</code> 分支下，执行合并命令 <code>git merge hot-fix</code><br>此时会 提示一下信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Auto-merging hello.txt</span><br><span class="line">CONFLICT (content): Merge conflict in hello.txt</span><br><span class="line">Automatic merge failed; fix conflicts and then commit the    result.</span><br></pre></td></tr></table></figure>

<p>自动 合并失败，这里的解决方式是需要手动编辑保留自己想要的内容</p>
<p><img src="https://gitee.com/coder_p0ny/md-nice-markdown_pic/raw/master/2021-5-24/1621847389612-image.png"></p>
<br>
<br>

<p>2.1 编辑【保留自己需要的内容】</p>
<p><img src="https://gitee.com/coder_p0ny/md-nice-markdown_pic/raw/master/2021-5-24/1621847777522-image.png"></p>
 <br>
<br>

<p>2.2 编辑【保留自己需要的内容】</p>
<p>   执行添加到 暂存区的命令： <code>git add hello.txt</code> </p>
<p>   执行提交本地库命令 ： <code>git commit -m &quot;merge test&quot;</code></p>
<p><img src="https://gitee.com/coder_p0ny/md-nice-markdown_pic/raw/master/2021-5-24/1621847976777-image.png"></p>
</li>
</ol>
<h3 id="1-5、回滚"><a href="#1-5、回滚" class="headerlink" title="1.5、回滚"></a>1.5、回滚</h3><ol>
<li><p>【通过版本号回滚】此前已经 往本地库中 提交过，就会有版本号，通过版本号来回滚到文件的某一状态</p>
<p>命令： <code>git reset --hard 完整的版本号</code></p>
</li>
</ol>
<p>   <img src="https://gitee.com/coder_p0ny/md-nice-markdown_pic/raw/master/2021-5-25/1621927434654-image.png"></p>
<ol start="2">
<li><p>【将文件从工作区的红色区域回滚到初始状态，仅对已经被添加到暂存区的文件有效】</p>
<p>命令： <code>git checkout -- 文件</code></p>
<p><img src="https://gitee.com/coder_p0ny/md-nice-markdown_pic/raw/master/2021-5-25/1621928976304-image.png" alt="初始内容"></p>
<p><img src="https://gitee.com/coder_p0ny/md-nice-markdown_pic/raw/master/2021-5-25/1621929186135-image.png" alt="修改文件内容"></p>
<p>最后执行 <code>git checkout -- hello.txt</code> ：将 hello.txt 的内容回滚到 初始内容的状态</p>
<p><img src="https://gitee.com/coder_p0ny/md-nice-markdown_pic/raw/master/2021-5-25/1621929550814-image.png"></p>
</li>
<li><p>【将文件从工作区的红色区域添加到暂存区，然后将暂存区的文件回滚到工作区的红色区域】</p>
<p>新增 <code>new.txt</code> 文件</p>
<p><img src="https://gitee.com/coder_p0ny/md-nice-markdown_pic/raw/master/2021-5-25/1621929886477-image.png" alt="git 检测新增文件"></p>
<p>将文件添加到 暂存区</p>
<p><img src="https://gitee.com/coder_p0ny/md-nice-markdown_pic/raw/master/2021-5-25/1621930038596-image.png" alt="将新增的文件添加到暂存区"></p>
<p>将暂存区的文件回滚到工作区中</p>
<p>执行 <code>git reset HEAD new.txt</code><br><img src="https://gitee.com/coder_p0ny/md-nice-markdown_pic/raw/master/2021-5-25/1621930227194-image.png"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Git 命令</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>CMD 常用命令</title>
    <url>/blog/2021/05/29/CMD%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="CMD-命令"><a href="#CMD-命令" class="headerlink" title="CMD 命令"></a>CMD 命令</h2><ul>
<li><p>打开控制面板</p>
<p> <code>control</code></p>
</li>
<li><p>打开 注册表编辑器</p>
<p><code>regedit</code></p>
</li>
<li><p>打开 远程桌面连接</p>
<p><code>mstsc</code></p>
</li>
<li><p>打开网络连接</p>
<p> <code>ncpa.cpl</code></p>
</li>
<li><p>打开 Internet属性</p>
<p><code>inetcpl.cpl</code></p>
</li>
<li><p>打开 添加删除程序</p>
<p><code>appwiz.cpl</code></p>
</li>
<li><p>打开 系统属性</p>
<p><code>sysdm.cpl</code></p>
</li>
<li><p>打开 防火墙</p>
<p><code>firewall.cpl</code></p>
</li>
<li><p>打开 鼠标属性</p>
<p><code>main.cpl</code></p>
</li>
<li><p>打开 计算机管理</p>
<p><code>compmgmt.msc</code></p>
</li>
<li><p>打开 设备管理器 对话框</p>
<p><code>devmgmt.msc</code> 或者 <code>hdwwiz.cpl</code></p>
</li>
<li><p>打开证书管理器</p>
<p><code>certmgr.msc</code></p>
</li>
<li><p>打开 windows服务</p>
<p><code>services.msc</code></p>
</li>
<li><p>打开本地安全策略</p>
<p><code>secpol.msc</code></p>
</li>
<li><p>打开 本地用户和组 对话框</p>
<p><code>lusrmgr.msc</code></p>
</li>
<li><p>打开 本地组策略编辑器</p>
<p><code>gpedit.msc</code></p>
</li>
<li><p>打开 高级安全 Windows Defender 防火墙【出站入站规则】</p>
<p><code>wf.msc</code></p>
</li>
<li><p>打开 磁盘管理【分盘工具】</p>
<p><code>diskmgmt.msc</code></p>
</li>
</ul>
]]></content>
      <categories>
        <category>CMD 常用命令</category>
      </categories>
      <tags>
        <tag>CMD</tag>
      </tags>
  </entry>
  <entry>
    <title>Git配置同时存在Gitee、Github多个账户</title>
    <url>/blog/2021/08/11/Git%E9%85%8D%E7%BD%AE%E5%90%8C%E6%97%B6%E5%AD%98%E5%9C%A8Gitee%E3%80%81Github%E5%A4%9A%E4%B8%AA%E8%B4%A6%E6%88%B7/</url>
    <content><![CDATA[<h1 id="Git配置同时存在Gitee、Github多个账户"><a href="#Git配置同时存在Gitee、Github多个账户" class="headerlink" title="Git配置同时存在Gitee、Github多个账户"></a>Git配置同时存在Gitee、Github多个账户</h1><h3 id="一、清空-Git-的全局配置文件里面的内容"><a href="#一、清空-Git-的全局配置文件里面的内容" class="headerlink" title="一、清空 Git 的全局配置文件里面的内容"></a>一、清空 Git 的全局配置文件里面的内容</h3><blockquote>
<ol>
<li><p><strong>清空</strong> Git 的全局配置文件里面的内容</p>
<p>全局配置文件的路径：<br><code>&quot;C:\Users\用户名\.gitconfig&quot;</code></p>
<p>该文件下有类似如下内容，则<strong>清空</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[user]</span><br><span class="line">email = p0ny233@88.com</span><br><span class="line">name = p0ny233</span><br></pre></td></tr></table></figure>

<p><strong>刚安装 <code>git</code> 的可以忽略这一步</strong></p>
</li>
</ol>
</blockquote>
<h3 id="二、生成新的-SSH-keys"><a href="#二、生成新的-SSH-keys" class="headerlink" title="二、生成新的 SSH keys"></a>二、生成新的 SSH keys</h3><blockquote>
<ol start="0">
<li><p>若在 <code>C:/Users/用户名/</code> 目录下没有 <code>.ssh</code> 文件夹，不允许创建以 <code>.</code> 开头的文件,那么就需要使用命令任意生成</p>
<blockquote>
<ol>
<li><p>打开 <code>git</code> 终端</p>
</li>
<li><p><code>ssh-keygen -t rsa -C &quot;p0ny233@github.com&quot;</code></p>
</li>
<li><p>该命令执行后，会在<code>C:/Users/用户名/</code> 目录下生成 <code>.ssh</code> 文件夹</p>
</li>
<li><p>然后将 <code>C:/Users/用户名/.ssh/</code> 目录下的 <strong>所有文件清空</strong> ，继续下面的步骤即可</p>
</li>
</ol>
</blockquote>
</li>
<li><p>生成 Github 的钥匙</p>
<blockquote>
<p> 命令格式：<code>ssh-keygen -t rsa -f C:/Users/用户名/.ssh/id_rsa.github -C &quot;p0ny233@github.com&quot;</code></p>
</blockquote>
</li>
<li><p>生成 Gitlab 的钥匙</p>
<blockquote>
<p> 命令格式：<code>ssh-keygen -t rsa -f C:/Users/用户名/.ssh/id_rsa.gitlab -C &quot;fengyucong@gitlab.com&quot;</code></p>
</blockquote>
</li>
<li><p>生成 Gitee 的钥匙</p>
<blockquote>
<p> 命令格式：<code>ssh-keygen -t rsa -f C:/Users/用户名/.ssh/id_rsa.gitee -C &quot;p0ny233@gitee.com&quot;</code></p>
</blockquote>
</li>
</ol>
</blockquote>
<h3 id="三、多账号必须配置-config-文件-重点"><a href="#三、多账号必须配置-config-文件-重点" class="headerlink" title="三、多账号必须配置 config 文件(重点)"></a>三、多账号必须配置 config 文件(重点)</h3><blockquote>
<ol>
<li>创建 <code>config</code> 文件<br>查看 <code>&quot;C:/Users/用户名/.ssh/</code>  目录下是否存在 <code>config</code> 文件，没有则创建 <img src="https://gitee.com/coder_p0ny/md-nice-markdown_pic/raw/master/2021-8-11/1628681315136-image.png"><blockquote>
<p><code>config</code> 文件的内容</p>
<p><strong>里面的内容不能含有中文【未自测】</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#Default gitHub user Self</span><br><span class="line">Host github.com</span><br><span class="line">    HostName github.com</span><br><span class="line">    User git #默认就是git，可以不写</span><br><span class="line">    IdentityFile  C:/Users/admin/.ssh/id_rsa.github</span><br><span class="line"></span><br><span class="line">#Add gitLab user </span><br><span class="line">    Host 10.11.10.37</span><br><span class="line">    HostName gitlab.com</span><br><span class="line">    User git</span><br><span class="line">    IdentityFile  C:/Users/admin/.ssh/id_rsa.gitlab</span><br><span class="line"></span><br><span class="line"># gitee</span><br><span class="line">Host gitee.com</span><br><span class="line">    Port 22</span><br><span class="line">    HostName gitee.com</span><br><span class="line">    User git</span><br><span class="line">    IdentityFile  C:/Users/admin/.ssh/id_rsa.gitee</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>对 <code>config</code> 文件内容的字段说明：</p>
<ul>
<li><p>Host</p>
<p>涵盖了下面一个段的配置，我们可以通过他来替代将要连接的服务器地址。<br>这里可以使用任意字段或通配符。<br>当ssh的时候如果服务器地址能匹配上这里Host指定的值，则Host下面指定的HostName将被作为最终的服务器地址使用</p>
</li>
<li><p>Port </p>
<p>自定义的端口。默认为22，可不配置</p>
</li>
<li><p>User </p>
<p>自定义的用户名，默认为git，可不配置</p>
</li>
<li><p>HostName </p>
<p>真正连接的服务器地址</p>
</li>
<li><p>PreferredAuthentications </p>
<p>指定优先使用哪种方式验证，支持密码和秘钥验证方式</p>
</li>
<li><p>IdentityFile </p>
<p>指定本次连接使用的密钥文件</p>
</li>
</ul>
</blockquote>
</li>
</ol>
</blockquote>
<h3 id="四、在-github-、-gitlab-和-gitee-网站添加-ssh"><a href="#四、在-github-、-gitlab-和-gitee-网站添加-ssh" class="headerlink" title="四、在 github 、 gitlab 和 gitee 网站添加 ssh"></a>四、在 github 、 gitlab 和 gitee 网站添加 ssh</h3><blockquote>
<ol>
<li>github直达地址：<code>https://github.com/settings/keys</code><img src="https://gitee.com/coder_p0ny/md-nice-markdown_pic/raw/master/2021-8-11/1628682745107-image.png" alt="github直达添加key地址"></li>
</ol>
<ol start="2">
<li><p>将 <code>C:\Users\admin\.ssh\id_rsa.github.pub</code> 文件的所有内容复制粘贴到 文本框中</p>
<p><img src="https://gitee.com/coder_p0ny/md-nice-markdown_pic/raw/master/2021-8-11/1628683524975-image.png" alt="打开文件"></p>
<p><img src="https://gitee.com/coder_p0ny/md-nice-markdown_pic/raw/master/2021-8-11/1628683643213-image.png" alt="点击添加"></p>
</li>
</ol>
</blockquote>
<h3 id="五、在-git-终端测试是否连接成功"><a href="#五、在-git-终端测试是否连接成功" class="headerlink" title="五、在 git 终端测试是否连接成功"></a>五、在 git 终端测试是否连接成功</h3><blockquote>
<ol>
<li><p>由于每个托管商的<strong>仓库</strong>都有唯一的后缀，比如 Github 的是 <a href="mailto:&#103;&#105;&#x74;&#x40;&#x67;&#x69;&#x74;&#104;&#x75;&#98;&#46;&#99;&#x6f;&#x6d;">&#103;&#105;&#x74;&#x40;&#x67;&#x69;&#x74;&#104;&#x75;&#98;&#46;&#99;&#x6f;&#x6d;</a>:*。<br>所以可以这样测试：<br><code>ssh -T git@github.com</code></p>
<p><img src="https://gitee.com/coder_p0ny/md-nice-markdown_pic/raw/master/2021-8-11/1628683925777-image.png"></p>
</li>
</ol>
<ol start="2">
<li><p>然后遇到问题【如果没遇到问题则跳过】：<code>git@github.com: Permission denied (publickey).</code></p>
<p><img src="https://gitee.com/coder_p0ny/md-nice-markdown_pic/raw/master/2021-8-11/1628684125655-image.png"></p>
<p> 解决方式：</p>
<blockquote>
<ol>
<li>使用命令 <code>ssh-agent bash</code>  </li>
<li>命令格式 <code>ssh-add C:/Users/用户名/.ssh/id_rsa.平台名称</code> 【<strong>注意路径的斜杠</strong>】<br>我这里的命令是 <code>ssh-add C:/Users/admin/.ssh/id_rsa.github</code><br><img src="https://gitee.com/coder_p0ny/md-nice-markdown_pic/raw/master/2021-8-11/1628685369174-image.png"></li>
</ol>
</blockquote>
</li>
</ol>
<ol start="3">
<li>继续测试<br><img src="https://gitee.com/coder_p0ny/md-nice-markdown_pic/raw/master/2021-8-11/1628685567778-image.png"><br>提示 <code>Hi 用户名! You&#39;ve successfully authenticated, but GitHub does not provide shell access. </code> 说明连接成功</li>
</ol>
</blockquote>
<h3 id="六、测试内网-gitlab-连接"><a href="#六、测试内网-gitlab-连接" class="headerlink" title="六、测试内网 gitlab 连接"></a>六、测试内网 gitlab 连接</h3><blockquote>
<ol>
<li>无法使用命令 <code>ssh -T 10.11.10.37</code> 进行测试，会遭到<strong>权限的拒绝</strong></li>
<li>而且 <code>config</code> 配置文件中的 Host 字段需要指定成 <strong>IP地址</strong> ，否则也会遭到<strong>权限的拒绝</strong></li>
<li>只能添加 仓库的地址去 <code>pull</code> 下来，才知道是否成功   </li>
<li>1 复制仓库地址<br>  <img src="https://gitee.com/coder_p0ny/md-nice-markdown_pic/raw/master/2021-8-11/1628689656125-image.png"></li>
<li>2 新建一个空文件夹 ，然后打开 git终端使用初始化命令<br>  <code>git init</code>   </li>
<li>3 使用命令添加刚复制的远程仓库<br><code>git remote add apk git@gitlab.testplus.cn:chenyang6/apk_checker.git</code>  </li>
<li>4 下载仓库中的代码<br><code>git pull apk master</code> </li>
</ol>
</blockquote>
<p><img src="https://gitee.com/coder_p0ny/md-nice-markdown_pic/raw/master/2021-8-11/1628689249564-image.png"></p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Java高级开发之JNI</title>
    <url>/blog/2021/08/02/Java%E9%AB%98%E7%BA%A7%E5%BC%80%E5%8F%91%E4%B9%8BJNI/</url>
    <content><![CDATA[<h3 id="JNI【Java-Native-Interface】"><a href="#JNI【Java-Native-Interface】" class="headerlink" title="JNI【Java Native Interface】"></a>JNI【Java Native Interface】</h3><blockquote>
<ol>
<li>什么是JNI<br>java本地开发接口，相当于桥梁的作用，一种协议。通过JNI可以让 java 调用 C/C++，或者让C/C++ 来调用 java代码</li>
</ol>
</blockquote>
<h4 id="JNI-环境配置"><a href="#JNI-环境配置" class="headerlink" title="JNI 环境配置"></a>JNI 环境配置</h4><ol>
<li>配置 下载 NDK 并且配置其环境<img src="https://gitee.com/coder_p0ny/md-nice-markdown_pic/raw/master/2021-8-2/1627890447467-image.png" alt="下载 NDK">下载完成配置环境变量进 PATH 中<br><img src="https://gitee.com/coder_p0ny/md-nice-markdown_pic/raw/master/2021-8-2/1627890299654-image.png" alt="下载工具"></li>
</ol>
<ol>
<li>创建一个 Helloworld app项目</li>
<li>在 <code>com.example.app</code> 包下创建 JNI类<br><img src="https://gitee.com/coder_p0ny/md-nice-markdown_pic/raw/master/2021-8-2/1627889725728-image.png"><code>JNI.java</code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.app;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JNI</span> </span>&#123;</span><br><span class="line"> <span class="keyword">static</span> &#123;</span><br><span class="line">     System.loadLibrary(<span class="string">&quot;test_lib&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">     定义 Navive方法</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> String <span class="title">sayHello</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<code>MainActivity .java</code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.app;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">     setContentView(R.layout.activity_main);</span><br><span class="line">     JNI jni = <span class="keyword">new</span> JNI();</span><br><span class="line">     System.out.println(jni.sayHello());</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在 <code>main</code> 下创建JNI包，在 JNI包下创建 .c 文件，在 app模块根路径下创建 <code>CMakeLists.txt</code> 文件<img src="https://gitee.com/coder_p0ny/md-nice-markdown_pic/raw/master/2021-8-2/1627890043007-image.png"><code>Hello.c</code><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* DO NOT EDIT THIS FILE - it is machine generated */</span></span><br><span class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></span><br><span class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdio.h&quot;</span></span></span><br><span class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdlib.h&quot;</span></span></span><br><span class="line"> </span><br><span class="line">  <span class="function">jstring <span class="title">Java_com_example_app_JNI_sayHello</span><span class="params">(JNIEnv* env,jobject jobj)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">char</span> *text = <span class="string">&quot;我会简单的 JNI&quot;</span>;</span><br><span class="line">      <span class="keyword">return</span> (*env)-&gt;NewStringUTF(env, text);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<code>CMakeLists.txt</code> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># CMake的编译脚本配置文件</span><br><span class="line"></span><br><span class="line"> # 1. 标注需要支持的CMake最小版本</span><br><span class="line"> cmake_minimum_required(VERSION 3.4.1)</span><br><span class="line"></span><br><span class="line"> # 2. add_library 定义需要编译的代码库 名称, 类型, 包含的源码</span><br><span class="line"> add_library(</span><br><span class="line">             # Sets the name of the library.</span><br><span class="line">             test_lib</span><br><span class="line">             # Sets the library as a shared library.</span><br><span class="line">             SHARED</span><br><span class="line">         src/main/jni/Hello.c</span><br><span class="line"> )</span><br><span class="line"></span><br><span class="line"> # 3. find_library 定义当前代码库需要依赖的系统或者第三方库文件(可以写多个)</span><br><span class="line"> find_library(</span><br><span class="line">         log_lib # 指定要查找的系统库, 给一个名字</span><br><span class="line">         log     # 真正要查找的liblog.so或者liblog.a</span><br><span class="line"> )</span><br><span class="line"></span><br><span class="line"> # 4. target_link_libraries设置最终编译的目标代码库</span><br><span class="line"> target_link_libraries(</span><br><span class="line">         test_lib  # add_library 生成的</span><br><span class="line">      $&#123;log_lib&#125; # find_library 找到的系统库</span><br><span class="line"> )</span><br></pre></td></tr></table></figure>



<img src="https://gitee.com/coder_p0ny/md-nice-markdown_pic/raw/master/2021-8-2/1627890614340-image.png" alt="配置"><code>build.gradle</code> 【是app下的根路径，不是项目根路径】<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line"> id <span class="string">&#x27;com.android.application&#x27;</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> android &#123;</span><br><span class="line"> compileSdkVersion <span class="number">30</span></span><br><span class="line"> buildToolsVersion <span class="string">&quot;30.0.3&quot;</span></span><br><span class="line"> ndkVersion <span class="string">&#x27;22.1.7171670&#x27;</span></span><br><span class="line"></span><br><span class="line"> defaultConfig &#123;</span><br><span class="line">     applicationId <span class="string">&quot;com.example.app&quot;</span></span><br><span class="line">     minSdkVersion <span class="number">16</span></span><br><span class="line">     targetSdkVersion <span class="number">30</span></span><br><span class="line">     versionCode <span class="number">1</span></span><br><span class="line">     versionName <span class="string">&quot;1.0&quot;</span></span><br><span class="line"></span><br><span class="line">     testInstrumentationRunner <span class="string">&quot;androidx.test.runner.AndroidJUnitRunner&quot;</span></span><br><span class="line"></span><br><span class="line">     ndk&#123;</span><br><span class="line">         moduleName <span class="string">&quot;Hello&quot;</span> <span class="comment">// so文件  lin + moduleName + .so</span></span><br><span class="line">         abiFilters <span class="string">&#x27;armeabi-v7a&#x27;</span>, <span class="string">&#x27;arm64-v8a&#x27;</span>, <span class="string">&#x27;x86&#x27;</span>, <span class="string">&#x27;x86_64&#x27;</span> <span class="comment">// cpu架构</span></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> externalNativeBuild &#123;</span><br><span class="line">     cmake &#123;</span><br><span class="line">         path <span class="string">&quot;CMakeLists.txt&quot;</span></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> buildTypes &#123;</span><br><span class="line">     release &#123;</span><br><span class="line">         minifyEnabled <span class="keyword">false</span></span><br><span class="line">         proguardFiles getDefaultProguardFile(<span class="string">&#x27;proguard-android-optimize.txt&#x27;</span>), <span class="string">&#x27;proguard-rules.pro&#x27;</span></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> compileOptions &#123;</span><br><span class="line">     <span class="keyword">sourceCompatibility</span> JavaVersion.VERSION_1_8</span><br><span class="line">     <span class="keyword">targetCompatibility</span> JavaVersion.VERSION_1_8</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line"></span><br><span class="line"> implementation <span class="string">&#x27;androidx.appcompat:appcompat:1.3.0&#x27;</span></span><br><span class="line"> implementation <span class="string">&#x27;com.google.android.material:material:1.4.0&#x27;</span></span><br><span class="line"> implementation <span class="string">&#x27;androidx.constraintlayout:constraintlayout:2.0.4&#x27;</span></span><br><span class="line"> testImplementation <span class="string">&#x27;junit:junit:4.+&#x27;</span></span><br><span class="line"> androidTestImplementation <span class="string">&#x27;androidx.test.ext:junit:1.1.3&#x27;</span></span><br><span class="line"> androidTestImplementation <span class="string">&#x27;androidx.test.espresso:espresso-core:3.4.0&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<code>local.properties</code><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">sdk.dir</span>=<span class="string">D\:\\DevelopKitTools\\android_sdk</span></span><br><span class="line"><span class="comment"> #ndk.dir=D\:\\DevelopKitTools\\android_sdk\\ndk-bundle</span></span><br><span class="line"> <span class="meta">ndk.dir</span>=<span class="string">D\:\\DevelopKitTools\\android_sdk\\ndk\\22.1.7171670</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<code>MainActivity.java</code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.app;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"> <span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">     setContentView(R.layout.activity_main);</span><br><span class="line">     JNI jni = <span class="keyword">new</span> JNI();</span><br><span class="line">     System.out.println(jni.sayHello());</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<img src="https://gitee.com/coder_p0ny/md-nice-markdown_pic/raw/master/2021-8-2/1627890980730-image.png" alt="效果图"></li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java JNI</tag>
      </tags>
  </entry>
  <entry>
    <title>Python操作Excel</title>
    <url>/blog/2021/05/29/Python%E6%93%8D%E4%BD%9CExcel/</url>
    <content><![CDATA[<h1 id="Python-操作-Excel"><a href="#Python-操作-Excel" class="headerlink" title="Python 操作 Excel"></a>Python 操作 Excel</h1><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ul>
<li>安装 <code>openpyxl</code> 库 <code>pip install openpyxl -i https://pypi.douban.com/simple --trusted pypi.douban.com</code></li>
</ul>
<h3 id="调用案例【需要从上到下按顺序操作】"><a href="#调用案例【需要从上到下按顺序操作】" class="headerlink" title="调用案例【需要从上到下按顺序操作】"></a>调用案例【需要从上到下按顺序操作】</h3><h5 id="1-选中单元格并进行读写单元格内容【加载已有excel文档或者新建excel文档，操作sheet表，操作单元格】"><a href="#1-选中单元格并进行读写单元格内容【加载已有excel文档或者新建excel文档，操作sheet表，操作单元格】" class="headerlink" title="1. 选中单元格并进行读写单元格内容【加载已有excel文档或者新建excel文档，操作sheet表，操作单元格】"></a>1. 选中单元格并进行读写单元格内容【加载已有excel文档或者新建excel文档，操作sheet表，操作单元格】</h5>  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 读取json</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> openpyxl <span class="keyword">import</span> load_workbook, workbook</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开现有的 Excel 文件  =============  操作已经存在的 excel文件</span></span><br><span class="line">wb = load_workbook(<span class="string">&quot;1.xlsx&quot;</span>)</span><br><span class="line"><span class="comment">#  ===============================================================</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ===================================== 新建一个文件然后再操作</span></span><br><span class="line"><span class="comment"># 创建 Excel 且默认创建一个Sheet ==============</span></span><br><span class="line">wb = workbook.Workbook()</span><br><span class="line"><span class="comment"># ===================</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(wb.sheetnames)  <span class="comment"># [&#x27;android&#x27;, &#x27;IOS&#x27;, &#x27;Steam&#x27;, &#x27;敏感的第三方组件&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#   =============================================</span></span><br><span class="line"><span class="comment"># 要操作 哪个sheet就选择哪个sheet</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择 名称为 android 的sheet  的方式一：</span></span><br><span class="line">sheet = wb[<span class="string">&#x27;android&#x27;</span>]  <span class="comment"># 然后可以使用 sheet 变量操作sheet里面的单元格</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 基于索引位置来 选择某个sheet  的方式二：</span></span><br><span class="line">sheet = wb.worksheets[<span class="number">0</span>]  <span class="comment"># 选择 名称为 android 的sheet</span></span><br><span class="line"><span class="comment"># 将第一个 Sheet对象赋给 变量 sheet</span></span><br><span class="line"><span class="comment">#   =======================================</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  ******************************************</span></span><br><span class="line"><span class="comment">#  ******************************************</span></span><br><span class="line"><span class="comment">#  ******************************************</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择某个单元格方式一：</span></span><br><span class="line">cell = sheet.cell(<span class="number">6</span>, <span class="number">2</span>)  <span class="comment"># 这两个参数分别是 row, column 都是int 类型的数据，传进去的是单元格的行数和列数</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">def cell(self, row, column, value=None):</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns a cell object based on the given coordinates.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Usage: cell(row=15, column=1, value=5)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Calling `cell` creates cells in memory when they</span></span><br><span class="line"><span class="string">    are first accessed.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param row: row index of the cell (e.g. 4)</span></span><br><span class="line"><span class="string">    :type row: int</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param column: column index of the cell (e.g. 3)</span></span><br><span class="line"><span class="string">    :type column: int</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择某个单元格方式二：</span></span><br><span class="line">cell = sheet[<span class="string">&#x27;A1&#x27;</span>]  <span class="comment"># cell = &lt;Cell &#x27;android&#x27;.A1&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(cell.value)  # 输出该单元格上的文本信息</span></span><br><span class="line"><span class="comment"># print(cell.style)  # 输出该单元格上的样式</span></span><br><span class="line"><span class="comment"># print(cell.font)  # 输出该单元格上的字体</span></span><br><span class="line"><span class="comment"># print(cell.alignment)  # 输出该单元格上的排列情况：水平居中还是其他等等</span></span><br><span class="line"><span class="comment"># 读取 名称为 android 的sheet，再读取该sheet中的 第6行第2列的单元格</span></span><br><span class="line"><span class="comment">#  ******************************************</span></span><br><span class="line"><span class="comment">#  ******************************************</span></span><br><span class="line"><span class="comment">#  ******************************************</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取部分单元格 比如：</span></span><br><span class="line">cell_list = sheet[<span class="string">&quot;b7&quot;</span>:<span class="string">&quot;c9&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(cell_list) </span><br><span class="line"><span class="comment"># 截图在下面</span></span><br><span class="line"><span class="comment"># ((&lt;Cell &#x27;android&#x27;.B7&gt;, &lt;Cell &#x27;android&#x27;.C7&gt;), (&lt;Cell &#x27;android&#x27;.B8&gt;, &lt;Cell &#x27;android&#x27;.C8&gt;), (&lt;Cell &#x27;android&#x27;.B9&gt;, &lt;Cell &#x27;android&#x27;.C9&gt;))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取第 N 行的所有单元格 A1,B1,C1,D1.....   =================================</span></span><br><span class="line"><span class="comment"># for cell in sheet[5]:  # 获取第 5 行的所有单元格上的数据</span></span><br><span class="line"><span class="comment">#     print(cell.value, end=&quot;\t&quot;)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  序号	说明	权限字符	作用	备注	敏感权限	protectionLevel	</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取所有行的数据 【也就在遍历时候使用索引获取第 N 列的数据】=================================</span></span><br><span class="line"><span class="comment"># for row in sheet.rows:</span></span><br><span class="line"><span class="comment">#     &quot;&quot;&quot;遍历sheet的每一行，加个索引就可以是 输出列的单元格上的数据&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">#     # row = (&lt;Cell &#x27;android&#x27;.A1&gt;, &lt;Cell &#x27;android&#x27;.B1&gt;,...  &lt;Cell &#x27;android&#x27;.F1&gt;, &lt;Cell &#x27;android&#x27;.G1&gt;)</span></span><br><span class="line"><span class="comment">#     # row = (&lt;Cell &#x27;android&#x27;.A2&gt;, &lt;Cell &#x27;android&#x27;.B2&gt;,.... &lt;Cell &#x27;android&#x27;.F2&gt;, &lt;Cell &#x27;android&#x27;.G2&gt;)</span></span><br><span class="line"><span class="comment">#     print(row)</span></span><br><span class="line"><span class="comment"># print(row[0].value) # 输出第一列的所有单元格上的数据</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取所有列的数据【基于此加个索引也可以获取 某一行的单元格】=================================</span></span><br><span class="line"><span class="keyword">for</span> col <span class="keyword">in</span> sheet.columns:</span><br><span class="line">    <span class="comment"># col = (&lt;Cell &#x27;android&#x27;.A1&gt;, &lt;Cell &#x27;android&#x27;.A2&gt;, &lt;Cell &#x27;android&#x27;.A3&gt;,... &lt;Cell &#x27;android&#x27;.A214&gt;)</span></span><br><span class="line">    <span class="comment"># col = (&lt;Cell &#x27;android&#x27;.B1&gt;, &lt;Cell &#x27;android&#x27;.B2&gt;, &lt;Cell &#x27;android&#x27;.B3&gt;,... &lt;Cell &#x27;android&#x27;.B214&gt;)</span></span><br><span class="line">    <span class="built_in">print</span>(col[<span class="number">0</span>])  <span class="comment"># 获取第一行的单元格</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除某个 Sheet</span></span><br><span class="line"><span class="keyword">del</span> wb[<span class="string">&quot;IOS&quot;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存修改的数据</span></span><br><span class="line">wb.active = <span class="number">0</span>  <span class="comment"># 指定默认打开的是哪个Sheet</span></span><br><span class="line"></span><br><span class="line">sheet.title = <span class="string">&quot;android&quot;</span>  <span class="comment"># Sheet 的名称</span></span><br><span class="line">wb.save(<span class="string">&quot;文件名.xlsx&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p><img src="https://gitee.com/coder_p0ny/md-nice-markdown_pic/raw/master/2021-5-28/1622170794929-image.png" alt="获取部分单元格"></p>
<h5 id="2-对齐方式"><a href="#2-对齐方式" class="headerlink" title="2. 对齐方式"></a>2. 对齐方式</h5><ul>
<li><p>horizontal：水平方式对齐：<code>general</code>,<code>left</code>,<code>center</code>,<code>right</code>,<code>fill</code>,<code>justify</code>,<code>centerContinuous</code>,<code>distributed</code></p>
</li>
<li><p>vertical: 垂直方式对齐：<code>top</code>, <code>center</code>, <code>bottom</code>, <code>justify</code>, <code>distributed</code></p>
</li>
<li><p>text_rotation: 旋转角度</p>
</li>
<li><p>wrap_text：自动换行</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> openpyxl <span class="keyword">import</span> load_workbook, workbook,styles</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">wb = load_workbook(<span class="string">&quot;1.xlsx&quot;</span>)</span><br><span class="line">sheet = wb.worksheets[<span class="number">0</span>]  <span class="comment"># 将第一个 Sheet对象赋给 变量 sheet</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 第6行第6列的单元格对象赋给 变量cell</span></span><br><span class="line">cell = sheet.cell(<span class="number">6</span>,<span class="number">6</span>)</span><br><span class="line">cell.alignment = styles.Alignment(horizontal=<span class="string">&#x27;center&#x27;</span>,vertical=<span class="string">&#x27;distributed&#x27;</span>, text_rotation=<span class="number">45</span>, wrap_text=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">wb.save(<span class="string">&#x27;1.xlsx&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="3-边框"><a href="#3-边框" class="headerlink" title="3. 边框"></a>3. 边框</h5><ul>
<li>side的style有如下：<br> <code>dashDot</code>,<code>dashDotDot</code>, <code>dashed</code>,<code>dotted</code>,<pre><code>                      `double`,`hair`, `medium`, `mediumDashDot`, `mediumDashDotDot`,
                      `mediumDashed`, `slantDashDot`, `thick`, `thin`
</code></pre>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> openpyxl <span class="keyword">import</span> load_workbook, workbook,styles</span><br><span class="line">  </span><br><span class="line">wb = load_workbook(<span class="string">&quot;1.xlsx&quot;</span>)</span><br><span class="line">sheet = wb.worksheets[<span class="number">0</span>]  <span class="comment"># 将第一个 Sheet对象赋给 变量 sheet</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 第6行第6列的单元格对象赋给 变量cell</span></span><br><span class="line">cell = sheet.cell(<span class="number">6</span>,<span class="number">6</span>)</span><br><span class="line">cell.border = cell.alignment = styles.Border(top=styles.Side(style=<span class="string">&#x27;thin&#x27;</span>,color=<span class="string">&#x27;ffb6c1&#x27;</span>),</span><br><span class="line">                               bottom=styles.Side(style=<span class="string">&#x27;dashed&#x27;</span>,color=<span class="string">&#x27;9932CC&#x27;</span>),</span><br><span class="line">                               left=styles.Side(style=<span class="string">&#x27;dashed&#x27;</span>,color=<span class="string">&#x27;9932CC&#x27;</span>),</span><br><span class="line">                               right=styles.Side(style=<span class="string">&#x27;dashed&#x27;</span>,color=<span class="string">&#x27;9932CC&#x27;</span>),</span><br><span class="line">                               diagonal=styles.Side(style=<span class="string">&#x27;dashed&#x27;</span>,color=<span class="string">&#x27;483d8b&#x27;</span>), <span class="comment"># 对角线</span></span><br><span class="line">                               diagonalUp=<span class="literal">True</span> <span class="comment"># 左下 - 右上</span></span><br><span class="line">                               <span class="comment"># diagonalDown=True # 左上 - 右下)</span></span><br><span class="line"></span><br><span class="line">wb.save(<span class="string">&#x27;1.xlsx&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h5 id="4-字体"><a href="#4-字体" class="headerlink" title="4. 字体"></a>4. 字体</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> openpyxl <span class="keyword">import</span> load_workbook, workbook,styles</span><br><span class="line">  </span><br><span class="line">wb = load_workbook(<span class="string">&quot;1.xlsx&quot;</span>)</span><br><span class="line">sheet = wb.worksheets[<span class="number">0</span>] <span class="comment"># 将第一个 Sheet对象赋给 变量 sheet</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 第6行第6列的单元格对象赋给 变量cell</span></span><br><span class="line">cell = sheet.cell(<span class="number">6</span>,<span class="number">6</span>)</span><br><span class="line">cell.font = styles.Font(name=<span class="string">&quot;微软雅黑&quot;</span>,size=<span class="number">16</span>,color=<span class="string">&#x27;ff0000&#x27;</span>,underline=<span class="string">&#x27;single&#x27;</span>)</span><br><span class="line"></span><br><span class="line">wb.save(<span class="string">&#x27;1.xlsx&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="5-背景颜色"><a href="#5-背景颜色" class="headerlink" title="5. 背景颜色"></a>5. 背景颜色</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> openpyxl <span class="keyword">import</span> load_workbook, workbook,styles</span><br><span class="line">  </span><br><span class="line">wb = load_workbook(<span class="string">&quot;1.xlsx&quot;</span>)</span><br><span class="line">sheet = wb.worksheets[<span class="number">0</span>] <span class="comment"># 将第一个 Sheet对象赋给 变量 sheet</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 第6行第6列的单元格对象赋给 变量cell</span></span><br><span class="line">cell = sheet.cell(<span class="number">6</span>,<span class="number">6</span>)</span><br><span class="line">cell.fill = styles.PatternFill(<span class="string">&#x27;solid&#x27;</span>,fgColor=<span class="string">&#x27;99ccff&#x27;</span>)</span><br><span class="line"></span><br><span class="line">wb.save(<span class="string">&#x27;1.xlsx&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h5 id="6-渐近背景颜色"><a href="#6-渐近背景颜色" class="headerlink" title="6. 渐近背景颜色"></a>6. 渐近背景颜色</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> openpyxl <span class="keyword">import</span> load_workbook, workbook,styles</span><br><span class="line">  </span><br><span class="line">wb = load_workbook(<span class="string">&quot;1.xlsx&quot;</span>)</span><br><span class="line">sheet = wb.worksheets[<span class="number">0</span>] <span class="comment"># 将第一个 Sheet对象赋给 变量 sheet</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 第6行第6列的单元格对象赋给 变量cell</span></span><br><span class="line">cell = sheet.cell(<span class="number">6</span>,<span class="number">6</span>)</span><br><span class="line">cell.fill = styles.GradientFill(<span class="string">&#x27;linear&#x27;</span>,stop=(<span class="string">&#x27;FFFFFF&#x27;</span>,<span class="string">&#x27;99ccff&#x27;</span>,<span class="string">&#x27;000000&#x27;</span>)) <span class="comment"># stop中的元素分别是 左中右的颜色</span></span><br><span class="line"></span><br><span class="line">wb.save(<span class="string">&#x27;1.xlsx&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h5 id="7-设置行高列宽的值【索引从-1-开始】"><a href="#7-设置行高列宽的值【索引从-1-开始】" class="headerlink" title="7. 设置行高列宽的值【索引从 1 开始】"></a>7. 设置行高列宽的值【索引从 1 开始】</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> openpyxl <span class="keyword">import</span> load_workbook, workbook,styles</span><br><span class="line">  </span><br><span class="line">wb = load_workbook(<span class="string">&quot;1.xlsx&quot;</span>)</span><br><span class="line">sheet = wb.worksheets[<span class="number">0</span>] <span class="comment"># 将第一个 Sheet对象赋给 变量 sheet</span></span><br><span class="line"></span><br><span class="line">sheet.row_dimensions[<span class="number">2</span>].height = <span class="number">50</span>  <span class="comment"># 设置 第 2 行的 高度</span></span><br><span class="line">sheet.column_dimensions[<span class="string">&quot;E&quot;</span>].width = <span class="number">100</span>  <span class="comment"># 设置 第 E 列的 宽度</span></span><br><span class="line"></span><br><span class="line">wb.save(<span class="string">&#x27;1.xlsx&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h5 id="8-合并单元格"><a href="#8-合并单元格" class="headerlink" title="8. 合并单元格"></a>8. 合并单元格</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> openpyxl <span class="keyword">import</span> load_workbook, workbook,styles</span><br><span class="line">  </span><br><span class="line">wb = load_workbook(<span class="string">&quot;1.xlsx&quot;</span>)</span><br><span class="line">sheet = wb.worksheets[<span class="number">0</span>] <span class="comment"># 将第一个 Sheet对象赋给 变量 sheet</span></span><br><span class="line"></span><br><span class="line">sheet.merge_cells(<span class="string">&quot;b2:d8&quot;</span>)</span><br><span class="line">sheet.merge_cell(start_row=<span class="number">15</span>, start_column=<span class="number">3</span>, end_row=<span class="number">18</span>, end_cloumn=<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解除合并</span></span><br><span class="line">sheet.unmerge_cells(<span class="string">&quot;b2:d8&quot;</span>)</span><br><span class="line"></span><br><span class="line">wb.save(<span class="string">&#x27;1.xlsx&#x27;</span>)</span><br></pre></td></tr></table></figure>


<h5 id="9-插入公式"><a href="#9-插入公式" class="headerlink" title="9. 插入公式"></a>9. 插入公式</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> openpyxl <span class="keyword">import</span> load_workbook, workbook,styles</span><br><span class="line">  </span><br><span class="line">wb = load_workbook(<span class="string">&quot;1.xlsx&quot;</span>)</span><br><span class="line">sheet = wb.worksheets[<span class="number">0</span>] <span class="comment"># 将第一个 Sheet对象赋给 变量 sheet</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入公式的写法相当于是写入值到单元格中</span></span><br><span class="line"><span class="keyword">from</span> openpyxl <span class="keyword">import</span> workbook, load_workbook</span><br><span class="line"></span><br><span class="line">wb = load_workbook(<span class="string">&#x27;2.xlsx&#x27;</span>)</span><br><span class="line">sheet = wb.worksheets[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用方式一选中单元格对象，然后使用该对象的 value 属性进行将公式写进去【必须带上value属性】</span></span><br><span class="line">cell = sheet.cell(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">cell.value = <span class="string">&quot;=a1+b1&quot;</span></span><br><span class="line"></span><br><span class="line">wb.save(<span class="string">&quot;2.xlsx&quot;</span>)</span><br><span class="line">wb.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="10-选取部分区域"><a href="#10-选取部分区域" class="headerlink" title="10. 选取部分区域"></a>10. 选取部分区域</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> openpyxl <span class="keyword">import</span> load_workbook</span><br><span class="line"></span><br><span class="line">wb = load_workbook(<span class="string">&#x27;2.xlsx&#x27;</span>)</span><br><span class="line">sheet = wb.worksheet[<span class="number">0</span>]  <span class="comment"># 操作 第一个 sheet</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># for i in sheet.iter_rows(min_col=1, min_row=5,max_col=7, max_row=10):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    参数说明：</span></span><br><span class="line"><span class="string">      1. min_col: 最小列数</span></span><br><span class="line"><span class="string">      2. min_row: 最小行数</span></span><br><span class="line"><span class="string">      </span></span><br><span class="line"><span class="string">      3. max_col: 最大列数</span></span><br><span class="line"><span class="string">      4. max_row: 最大行数</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<h6 id="10-1-截取部分，使用案例一："><a href="#10-1-截取部分，使用案例一：" class="headerlink" title="10.1 截取部分，使用案例一："></a>10.1 截取部分，使用案例一：</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> openpyxl <span class="keyword">import</span> load_workbook</span><br><span class="line"></span><br><span class="line">wb = load_workbook(<span class="string">&#x27;2.xlsx&#x27;</span>)</span><br><span class="line">sheet = wb.worksheets[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 截取部分区域</span></span><br><span class="line"><span class="keyword">for</span> cell <span class="keyword">in</span> sheet.iter_cols(min_row=<span class="number">1</span>, max_row=<span class="number">3</span>, min_col=<span class="number">1</span>, max_col=<span class="number">2</span>):  <span class="comment"># 从 第一行 到 第三行，从第一列 到 第二列</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    迭代行数，cell = (&lt;Cell &#x27;Sheet1&#x27;.A1&gt;, &lt;Cell &#x27;Sheet1&#x27;.A2&gt;, &lt;Cell &#x27;Sheet1&#x27;.A3&gt;)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(cell)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> cell <span class="keyword">in</span> sheet[<span class="string">&#x27;b2&#x27;</span>:<span class="string">&#x27;c6&#x27;</span>]:</span><br><span class="line">    <span class="built_in">print</span>(cell)</span><br><span class="line">    </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/coder_p0ny/md-nice-markdown_pic/raw/master/2021-5-28/1622191208356-image.png" alt=" 截取部分，使用案例一"></p>
<p><img src="https://gitee.com/coder_p0ny/md-nice-markdown_pic/raw/master/2021-5-28/1622192257969-image.png" alt="截取部分，使用案例一"></p>
<h5 id="11-删除-sheet-delete-rows-idx-amount-、sheet-delete-cols-idx-amount"><a href="#11-删除-sheet-delete-rows-idx-amount-、sheet-delete-cols-idx-amount" class="headerlink" title="11. 删除 sheet.delete_rows(idx,amount)、sheet.delete_cols(idx,amount)"></a>11. 删除 <code>sheet.delete_rows(idx,amount)</code>、<code>sheet.delete_cols(idx,amount)</code></h5><ul>
<li>参数说明：<ol>
<li>idx：要删除的索引位置</li>
<li>amount：从索引位置开始要删除的个数【 默认为1 】<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> openpyxl <span class="keyword">import</span> load_workbook</span><br><span class="line"></span><br><span class="line">wb = load_workbook(<span class="string">&#x27;2.xlsx&#x27;</span>)</span><br><span class="line">sheet = wb.worksheets[<span class="number">0</span>]  <span class="comment"># 将工作表对象 赋 给 变量 sheet</span></span><br><span class="line"></span><br><span class="line">sheet.delete_cols(idx=<span class="number">1</span>,amount=<span class="number">1</span>)</span><br><span class="line">sheet.delete_rows(idx=<span class="number">1</span>,amount=<span class="number">1</span>)</span><br><span class="line">wb.save(<span class="string">&#x27;2.xlsx&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<h5 id="12-插入-sheet-insert-rows-idx-amount-、sheet-insert-cols-idx-amount"><a href="#12-插入-sheet-insert-rows-idx-amount-、sheet-insert-cols-idx-amount" class="headerlink" title="12. 插入 sheet.insert_rows(idx,amount)、sheet.insert_cols(idx,amount)"></a>12. 插入 <code>sheet.insert_rows(idx,amount)</code>、<code>sheet.insert_cols(idx,amount)</code></h5><ul>
<li>参数说明：<ol>
<li>idx：要插入的索引位置</li>
<li>amount：从索引位置开始要插入的个数【 默认为1 】<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> openpyxl <span class="keyword">import</span> load_workbook</span><br><span class="line"></span><br><span class="line">wb = load_workbook(<span class="string">&#x27;2.xlsx&#x27;</span>)</span><br><span class="line">sheet = wb.worksheets[<span class="number">0</span>]  <span class="comment"># 将工作表对象 赋 给 变量 sheet</span></span><br><span class="line"></span><br><span class="line">sheet.insert_rows(idx=<span class="number">5</span>,amount=<span class="number">10</span>)</span><br><span class="line">sheet.insert_cols(idx=<span class="number">3</span>,amount=<span class="number">2</span>)</span><br><span class="line">wb.save(<span class="string">&#x27;2.xlsx&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<h5 id="13-移动-sheet-move-range-quot-H2-J10-quot-rows-1-cols-15"><a href="#13-移动-sheet-move-range-quot-H2-J10-quot-rows-1-cols-15" class="headerlink" title="13. 移动 sheet.move_range(&quot;H2:J10&quot;, rows=-1, cols=15)"></a>13. 移动 <code>sheet.move_range(&quot;H2:J10&quot;, rows=-1, cols=15)</code></h5><ul>
<li><p>参数说明：</p>
<ol>
<li>第一个字符串类型的参数：选中的Excel表格的区域 <code>&quot;H2:J10&quot;</code></li>
<li>rows = -1 : 向上移动1个位置、rows = 1 ：向下移动 1 行</li>
<li>cols = 15 : 向右移动15个位置<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> openpyxl <span class="keyword">import</span> load_workbook</span><br><span class="line">wb = load_workbook(<span class="string">&#x27;2.xlsx&#x27;</span>)</span><br><span class="line">sheet = wb.worksheets[<span class="number">0</span>]  <span class="comment"># 将工作表对象 赋 给 变量 sheet</span></span><br><span class="line"></span><br><span class="line">sheet.move_range(<span class="string">&quot;H2:J10&quot;</span>, rows=-<span class="number">1</span>, cols=<span class="number">15</span>)</span><br><span class="line">wb.save(<span class="string">&#x27;2.xlsx&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h6 id="13-1-移动的区域中的单元格显示的数据是-写入公式的出来的结果"><a href="#13-1-移动的区域中的单元格显示的数据是-写入公式的出来的结果" class="headerlink" title="13.1 移动的区域中的单元格显示的数据是 写入公式的出来的结果"></a>13.1 移动的区域中的单元格显示的数据是 写入公式的出来的结果</h6></li>
</ol>
</li>
<li><p>假如 ：c1 单元格的数据是 由 a1 * b1 相乘的来的也就是公式：<code>=a1*b1</code></p>
<p>现在要将 a1 到 c1 的数据向右移动 n 列，那么若想公式随着位置的移动而改变，需要在 <code>move_range</code> 方法中添加个参数并且改为 <code>True</code> </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> openpyxl <span class="keyword">import</span> load_workbook</span><br><span class="line">wb = load_workbook(<span class="string">&#x27;2.xlsx&#x27;</span>)</span><br><span class="line">sheet = wb.worksheets[<span class="number">0</span>]  <span class="comment"># 将工作表对象 赋 给 变量 sheet</span></span><br><span class="line"></span><br><span class="line">sheet.move_range(<span class="string">&quot;a1:c3&quot;</span>, cols=<span class="number">15</span>, translate=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># True 相当于随着源数据单元格的变动而改变</span></span><br><span class="line"></span><br><span class="line">wb.save(<span class="string">&#x27;2.xlsx&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 解压缩文件【只能压缩文件夹】</title>
    <url>/blog/2021/05/29/Python%20%E8%A7%A3%E5%8E%8B%E7%BC%A9%E6%96%87%E4%BB%B6%E3%80%90%E5%8F%AA%E8%83%BD%E5%8E%8B%E7%BC%A9%E6%96%87%E4%BB%B6%E5%A4%B9%E3%80%91/</url>
    <content><![CDATA[<h3 id="Python-压缩文件夹，解压文件"><a href="#Python-压缩文件夹，解压文件" class="headerlink" title="Python 压缩文件夹，解压文件"></a>Python 压缩文件夹，解压文件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">base_name : 压缩后的压缩文件名</span></span><br><span class="line"><span class="string">format : 压缩格式：如：`zip`, `tar`, `gztar`, `bztar`, or `xztar`</span></span><br><span class="line"><span class="string">root_dir : 要压缩哪个文件夹就选哪个文件夹 【只能是文件夹，不可以是文件，否则会 抛出 NotADirectoryError】 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 压缩文件</span></span><br><span class="line">shutil.make_archive(<span class="string">&#x27;2&#x27;</span>,<span class="built_in">format</span>=<span class="string">&#x27;zip&#x27;</span>,root_dir=<span class="string">&#x27;./Analyse&#x27;</span>)</span><br><span class="line"><span class="comment"># 第一个参数是 base_name</span></span><br><span class="line"><span class="comment"># 第二个参数是 format</span></span><br><span class="line"><span class="comment"># 第三个参数是 root_dir</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;压缩完成&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压文件</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">filename：压缩包文件</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">extract_dir：是目标目录的名称，其中包含存档文件，打开包装。如果未提供，则使用当前工作目录,</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">format：是压缩包格式，如果没有提供那么会根据文件扩展名进行解压</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">shutil.unpack_archive(<span class="string">&#x27;2.zip&#x27;</span>,extract_dir=<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line"><span class="comment"># 会将压缩包的内容解压出来，然后放进一个名称为 2 的文件夹中，</span></span><br><span class="line"><span class="comment"># 如果没有给extract_dir提供，那么会从压缩包中拿出放到当前目录下</span></span><br><span class="line"><span class="comment"># 建议给 extract_dir 提供存放的目录</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;解压成功&quot;</span>)</span><br></pre></td></tr></table></figure>


<p><img src="https://gitee.com/coder_p0ny/md-nice-markdown_pic/raw/master/2021-5-29/1622280481947-image.png"></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows常用技巧</title>
    <url>/blog/2021/05/29/Windows%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h4 id="1-手动驱动备份【需要管理员权限】"><a href="#1-手动驱动备份【需要管理员权限】" class="headerlink" title="1. 手动驱动备份【需要管理员权限】"></a>1. 手动驱动备份【需要管理员权限】</h4><blockquote>
<p>参考：<code>http://www.baiyunxitong.com/jiaocheng/4786.html</code> </p>
</blockquote>
<p>使用 win+r  输入 cmd，跳出命令提示符窗口然后输入以下命令，来提升为 管理员权限</p>
<p><code>runas /user:administrator cmd</code> </p>
<p>如果出现</p>
<p><img src="https://gitee.com/coder_p0ny/Typora_img/raw/master/Java/img/cmd%E6%8F%90%E5%8D%87%E4%B8%BA%E7%AE%A1%E7%90%86%E5%91%98%E6%9D%83%E9%99%90%E9%94%99%E8%AF%AF.png" alt="image-20210301000731586"></p>
<ul>
<li><p>很大可能是 Administrator账户的密码为空的。</p>
<p>  解决方式：</p>
<ol>
<li><p>win+r 输入 <code>compmgmt.msc</code> </p>
<p> <img src="https://gitee.com/coder_p0ny/Typora_img/raw/master/Java/img/%E6%8F%90%E5%8D%87%E7%AE%A1%E7%90%86%E5%91%98%E6%9D%83%E9%99%90%E8%A7%A3%E5%86%B3%E6%96%B9%E5%BC%8Fstep1.png" alt="image-20210301001027050"></p>
</li>
<li><p>点击 ”用户“</p>
<p>  <img src="https://gitee.com/coder_p0ny/Typora_img/raw/master/Java/img/%E6%8F%90%E5%8D%87%E7%AE%A1%E7%90%86%E5%91%98%E6%9D%83%E9%99%90%E8%A7%A3%E5%86%B3%E6%96%B9%E5%BC%8Fstep2.png" alt="image-20210301001239472"></p>
</li>
<li><p>右键点击  “设置密码”</p>
<p> <img src="https://gitee.com/coder_p0ny/Typora_img/raw/master/Java/img/%E6%8F%90%E5%8D%87%E7%AE%A1%E7%90%86%E5%91%98%E6%9D%83%E9%99%90%E8%A7%A3%E5%86%B3%E6%96%B9%E5%BC%8Fstep3.png" alt="image-20210301001616934"></p>
</li>
<li><p>效果图</p>
<p> <img src="https://gitee.com/coder_p0ny/Typora_img/raw/master/Java/img/%E6%8F%90%E5%8D%87%E7%AE%A1%E7%90%86%E5%91%98%E6%9D%83%E9%99%90%E8%A7%A3%E5%86%B3%E6%96%B9%E5%BC%8F%E6%95%88%E6%9E%9C%E5%9B%BE.png" alt="image-20210301001820364"></p>
</li>
</ol>
</li>
</ul>
<p>最后使用命令 <code>dism /online /export-driver /destination:目标文件夹路径</code> </p>
<p><img src="https://gitee.com/coder_p0ny/Typora_img/raw/master/Java/img/cmd%E6%89%8B%E5%8A%A8%E5%A4%87%E4%BB%BD%E9%A9%B1%E5%8A%A8.png" alt="image-20210301002109435"></p>
<h4 id="2-手动还原驱动命令【需要管理员权限】"><a href="#2-手动还原驱动命令【需要管理员权限】" class="headerlink" title="2. 手动还原驱动命令【需要管理员权限】"></a>2. 手动还原驱动命令【需要管理员权限】</h4><p><code>dism /online /Add-Driver /Driver:目标文件夹路径 /Recurse</code> </p>
<p><img src="https://gitee.com/coder_p0ny/Typora_img/raw/master/Java/img/%E8%BF%98%E5%8E%9F%E9%A9%B1%E5%8A%A8%E5%91%BD%E4%BB%A4.png" alt="image-20210301002630148"></p>
]]></content>
      <categories>
        <category>Windows常用技巧</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/blog/2021/08/11/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Linux使用MySQL5.7 过程出现的问题</title>
    <url>/blog/2021/02/16/Linux%E4%BD%BF%E7%94%A8MySQL5-7-%E8%BF%87%E7%A8%8B%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="Linux使用MySQL5-7-过程出现的问题"><a href="#Linux使用MySQL5-7-过程出现的问题" class="headerlink" title="Linux使用MySQL5.7 过程出现的问题"></a>Linux使用MySQL5.7 过程出现的问题</h1><ol>
<li><p>执行修改密码命令<br><code>alter user user() identified by &#39;root&#39;;</code><br>或者<br><code>set password for root@localhost = password(&#39;root&#39;);</code>   </p>
<p> 出现错误信息<br> <code>ERROR 1819 (HY000): Your password does not satisfy the current policy requirements  </code></p>
<p> 信息上说明设置的密码是弱级别的，需要提高密码强度。</p>
<p><strong>解决：</strong></p>
<ul>
<li>将安全级别设置为 <code>LOW</code> ,如果向将密码设置为 <code>root</code> ,那么还需要更改密码长度  【<strong>默认密码长度为8</strong>，可以设置为其它值，最小4位】<br>  设置安全级别：<br>  <code>set global validate_password_policy=LOW;</code>    更改密码默认长度：<br>  <code>set global validate_password_length=4;</code>  执行以上两条命令之后就可以将密码设置为 <strong>长度为4 的弱密码 比如 root</strong></li>
</ul>
</li>
</ol>
<ol start="2">
<li><p>安装MySQL数据库之后使用命令 <code>mysql -uroot -p</code> 让你输入，但是不知道密码怎么办？  </p>
<ul>
<li><p><strong>方式 1.</strong> 可直接跳过密码进行登陆   </p>
<ol>
<li><p>修改 <code>vi /etc/my.cnf</code> 文件</p>
</li>
<li><p>在该文件下的 <strong>[mysqld]模块</strong> 添加以下代码<br><code>skip-grant-tables# 忽略mysql权限问题，直接登录</code><br>如图：</p>
<p> <img src="https://gitee.com/coder_p0ny/md-nice-markdown_pic/raw/master/2021-5-24/1621832433778-image.png" alt="绕过密码登陆"></p>
<p> 然后执行命令 <code>systemctl restart mysqld</code> 重启mysql服务<br>再次执行<code>mysql-uroot -p</code> 回车<br>然后提示<strong>输入密码的时候直接敲回车</strong>即可</p>
</li>
</ol>
</li>
<li><p><strong>方式 2.</strong> 查看默认初始密码  </p>
<p>  <strong>注意：</strong>：【如果是第一次安装MySQL可以忽略】之前有安装过MySQL数据库并且再次安装MySQL的数据库的需要先将 <code>/var/log/mysqld.log</code> 这个文件删除<br>  <strong>总之就是需要保证没有这个文件 <code>/var/log/mysqld.log</code></strong></p>
<p>  然后启动MySQL服务<code>systemctl start mysqld</code><br>  此时就会生成此文件 <code>/var/log/mysqld.log</code><br>  然后执行命令 <code>grep &#39;temporary password&#39; /var/log/mysqld.log</code><br>  就可以看到如图所示的内容：</p>
<p>  <img src="https://imgkr2.cn-bj.ufileos.com/33c2adc2-ab99-409d-8e64-18c4f86393fa.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&Signature=%252BA5dfGEoYYfEDezpdgfIpHqho5w%253D&Expires=1613549719" alt="显示默认密码"></p>
<p>  <code>mZk=kau!p0Zq</code> 就是默认密码，使用命令<code>mysql -uroot -p</code>,提示输入登陆密码的时候再输入该默认密码，即可登陆成功</p>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>【Android】控件的基本属性</title>
    <url>/blog/2021/06/02/%E3%80%90Android%20%E6%8E%A7%E4%BB%B6%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%B1%9E%E6%80%A7%E3%80%91/</url>
    <content><![CDATA[<h1 id="Android-First-Empty-Application"><a href="#Android-First-Empty-Application" class="headerlink" title="Android First Empty Application"></a>Android First Empty Application</h1><h4 id="控件的基本属性"><a href="#控件的基本属性" class="headerlink" title="控件的基本属性"></a>控件的基本属性</h4><table>
<thead>
<tr>
<th>属性名</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>android:layout_width</td>
<td>控件的宽度【match_parent、123dp】</td>
</tr>
<tr>
<td>android:layout_height</td>
<td>控件的高度【match_parent、123dp】</td>
</tr>
<tr>
<td>android:text</td>
<td>控件文本内容</td>
</tr>
<tr>
<td>android:textColor</td>
<td>字体颜色【#00000000】</td>
</tr>
<tr>
<td>android:textSize</td>
<td>字体大小 【40sp】</td>
</tr>
<tr>
<td>android:textStyle</td>
<td>字体样式【粗体(blod)、italic(斜体)】</td>
</tr>
<tr>
<td>android:gravity</td>
<td>该控件对象的内容对齐方式【center_vertical(垂直居中)】</td>
</tr>
</tbody></table>
<p><img src="https://gitee.com/coder_p0ny/md-nice-markdown_pic/raw/master/2021-6-2/1622616032232-image.png" alt="展示下拉框选项"></p>
<p><img src="https://gitee.com/coder_p0ny/md-nice-markdown_pic/raw/master/2021-6-2/1622616086067-image.png" alt="下拉框各个选项"></p>
<h3 id="创建一个-Empty-Application-项目"><a href="#创建一个-Empty-Application-项目" class="headerlink" title="创建一个 Empty Application 项目"></a>创建一个 Empty Application 项目</h3><p>将 路径 <code>...\项目名\app\src\main\java\com\example\myfirstapp</code>下的 <code>MainActivity.java</code>文件的内容，替换以下内容</p>
<p><code>MainActivity.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.myfirstapp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.annotation.SuppressLint;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        TextView tv_one = findViewById(R.id.tv_one);</span><br><span class="line">        tv_one.setText(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">        <span class="comment">// 使用 Java代码获取控件对象，然后给该对象设置文本内容，</span></span><br><span class="line">        <span class="comment">// 若在xml文件中设置了该控件的文本，运行java代码后会覆盖xml 中的内容</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>
<br>



<p>将路径 <code>...\项目名\app\src\main\res\layout\</code> 下的 <code>activity_main.xml</code> 文件的内容  替换成  以下内容</p>
<p><code>activity_main.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><span class="comment">&lt;!--&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    xmlns:tools=&quot;http://schemas.android.com/tools&quot;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    android:layout_width=&quot;match_parent&quot;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    android:layout_height=&quot;match_parent&quot;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    tools:context=&quot;.MainActivity&quot;&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    &lt;TextView--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        android:layout_width=&quot;wrap_content&quot;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        android:layout_height=&quot;wrap_content&quot;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        android:text=&quot;Hello World!&quot;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        app:layout_constraintLeft_toLeftOf=&quot;parent&quot;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        app:layout_constraintRight_toRightOf=&quot;parent&quot;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--此 XML 文件定义了 activity 界面 (UI) 的布局。它包含一个 TextView 元素，其中具有“Hello, World!”文本--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">&quot;center_vertical&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/tv_one&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;843dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;400dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;看不到我&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">&quot;#FF000000&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;90sp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textStyle</span>=<span class="string">&quot;bold&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        android:layout_width=&quot;match_parent&quot;</span></span><br><span class="line"><span class="comment">            TextView 控件 的宽度 由 LineLayout容器决定，LineLayout容器多宽，TextView控件就有多宽</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        android:layout_width=&quot;wrap_content&quot;</span></span><br><span class="line"><span class="comment">            TextView 控件 的宽度 由 TextView控件的内容决定。</span></span><br><span class="line"><span class="comment">        同理 高度也是一样的</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        android:id=&quot;@+id/tv_one&quot;</span></span><br><span class="line"><span class="comment">                该属性的作用是，让 java 代码可以根据 id 属性值 获取 控件对象</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        android:layout_width=&quot;200dp&quot;</span></span><br><span class="line"><span class="comment">            该属性值可以使用数字来 赋值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                参数 的值 按住 ctrl 不放 鼠标左键点击</span></span><br><span class="line"><span class="comment">                可以看到有三个参数值，其中一个【fill_parent】已经被弃用的</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                剩余两个参数值分别是：</span></span><br><span class="line"><span class="comment">                    1. wrap_content : 根据 TextView里面控件的内容 分配</span></span><br><span class="line"><span class="comment">                    2. match_parent ： 大小根据取决于 LinearLaout 容器</span></span><br><span class="line"><span class="comment">                    3. fill_parent ： 已经过时</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        android:textColor=&quot;#00000000&quot;</span></span><br><span class="line"><span class="comment">            设置字体颜色</span></span><br><span class="line"><span class="comment">            前面两个 零含义：颜色的透明度 ，00 为纯透明 FF为 不透明</span></span><br><span class="line"><span class="comment">            依次往后两个 零：代表 R(00)G(00)B(00) 红绿蓝</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        android:textStyle=&quot;bold&quot;</span></span><br><span class="line"><span class="comment">            设置字体</span></span><br><span class="line"><span class="comment">            normal ：无效果</span></span><br><span class="line"><span class="comment">            bold ：  粗体</span></span><br><span class="line"><span class="comment">            italic ：斜体</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        android:gravity=&quot;center_vertical&quot;</span></span><br><span class="line"><span class="comment">            该控件对象的内容的对齐方式</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">TextView</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android Studio</tag>
      </tags>
  </entry>
  <entry>
    <title>清除BIOS界面密码</title>
    <url>/blog/2021/07/23/%E6%B8%85%E9%99%A4BIOS%E7%95%8C%E9%9D%A2%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[<h2 id="笔记本电脑设置BIOS界面密码，但是密码忘记了"><a href="#笔记本电脑设置BIOS界面密码，但是密码忘记了" class="headerlink" title="笔记本电脑设置BIOS界面密码，但是密码忘记了"></a>笔记本电脑设置BIOS界面密码，但是密码忘记了</h2><blockquote>
<blockquote>
<p>bios密码可以通过下面的网站解决，<br>把bios界面上显示的几位输入网站内，之后网站会给你一组，一定要<strong>区分好大小写</strong>，之后<strong>输入到密码输入框当中按Ctrl+回车</strong> 轻松解决</p>
</blockquote>
</blockquote>
<p><code>https://bios-pw.org/</code></p>
]]></content>
      <categories>
        <category>Windows常用技巧</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>从Gitee仓库拉取原有的 blog</title>
    <url>/blog/2021/06/01/%E4%BB%8EGitee%E4%BB%93%E5%BA%93%E6%8B%89%E5%8F%96%E5%8E%9F%E6%9C%89%E7%9A%84%20blog/</url>
    <content><![CDATA[<h2 id="从Gitee仓库拉取原有的-blog"><a href="#从Gitee仓库拉取原有的-blog" class="headerlink" title="从Gitee仓库拉取原有的 blog"></a>从Gitee仓库拉取原有的 blog</h2><blockquote>
<ol>
<li><code>git clone https://gitee.com/coder_p0ny/blog.git</code> 拉取项目</li>
<li>另外新建一个文件夹作为 blog 的根目录，然后该目录下是空白的，直接在该目录下 打开 git终端，然后输入命令 <code>hexo init</code> 初始化 hexo,生成 blog 模板，然后再将第一步拉取的blog中的所有文件复制到新建的文件夹中，替换所有相同的文件</li>
<li>然后执行命令 <code>hexo s --debug</code>  开启服务</li>
<li>浏览器访问 <code>http://localhost:4000</code> 即可</li>
</ol>
</blockquote>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git hexo</tag>
      </tags>
  </entry>
</search>
